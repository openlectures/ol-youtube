import java.io.*;
import java.lang.reflect.Type;
import java.util.*;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;

/**
 * @author linanqiu
 * @file_name TagProcessor.java
 * 
 *            Processes tags from a given description of a checkpoint using a
 *            whitelist generated by KeywordParser. Takes in Json of
 *            attribute=description, key=some_key, value=description_value, and
 *            outputs attribute=tag, key=some_key, value=tag_value
 * 
 *            TODO: add in support for transcripts
 */
public class TagProcessor {

	private String keywordFileName;
	private File keywordFile;
	private Scanner scan;
	private ArrayList<GsonCheckpoint> gsonList;
	private ArrayList<String> keywordList;

	/**
	 * builds a keywordlist from the keyword file passed to this constructor
	 * 
	 * @param keywordFileName
	 * @throws FileNotFoundException
	 */
	public TagProcessor(String keywordFileName) throws FileNotFoundException {
		this.keywordFileName = keywordFileName;
		keywordFile = new File(this.keywordFileName);
		scan = new Scanner(keywordFile);
		buildKeywordList();
	}

	/**
	 * private method used to build keyword list
	 */
	private void buildKeywordList() {
		keywordList = new ArrayList<String>();
		while (scan.hasNext()) {
			keywordList.add(scan.nextLine());
		}
	}

	/**
	 * runs through all the gson checkpoints, changing attribute to "tag" and
	 * replacing value with the tags generated.
	 */
	public void scanCheckpoints() {
		for (GsonCheckpoint checkpoint : gsonList) {
			String tags = pickTags(checkpoint);
			checkpoint.setAttribute("tags");
			checkpoint.setValue(tags);
		}
	}

	/**
	 * returns a Json list of checkpoints
	 * 
	 * @return gsonList modified gsonList with attribute changed to tag and
	 *         value changed to tag keywords
	 */
	public String getJson() {
		Gson gson = new Gson();
		return gson.toJson(gsonList);
	}

	/**
	 * Runs through whitelist for the checkpoint and picks out the ones that
	 * appear in the description of the checkpoing
	 * 
	 * @param checkpoint
	 * @return
	 */
	private String pickTags(GsonCheckpoint checkpoint) {
		String tagsFound = "";
		for (String keyword : keywordList) {
			if (checkpoint.getValue().toLowerCase().indexOf(keyword) > -1) {
				if (tagsFound.equals("")) {
					tagsFound = tagsFound + keyword;
				} else {
					tagsFound = tagsFound + ", " + keyword;
				}
			}
		}
		return tagsFound;
	}

	/**
	 * takes in json of attribute=description, key=some_key,
	 * value=description_value
	 * 
	 * @param json
	 */
	public void setJson(String json) {
		Gson gson = new Gson();
		Type collectionType = new TypeToken<Collection<GsonCheckpoint>>() {
		}.getType();
		gsonList = gson.fromJson(json, collectionType);
	}

	/**
	 * @author linanqiu
	 * @file_name TagProcessor.java
	 * 
	 *            subclass gsonCheckpoint to represent one deserialized
	 *            checkpoint
	 */
	private class GsonCheckpoint {

		private String attribute;
		private String value;
		private String key;

		public String toString() {
			return attribute + value + key;
		}

		public String getAttribute() {
			return attribute;
		}

		public void setAttribute(String attribute) {
			this.attribute = attribute;
		}

		public String getValue() {
			return value;
		}

		public void setValue(String value) {
			this.value = value;
		}

		public String getKey() {
			return key;
		}
	}
}
